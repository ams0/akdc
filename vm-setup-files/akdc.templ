#!/bin/sh

####### do not change these values #######
export AKDC_ME=akdc
export AKDC_FQDN="{{fqdn}}"
export AKDC_DEBUG="{{debug}}"
export AKDC_DAPR="{{debug}}"
export AKDC_REPO="{{repo}}"
export AKDC_CLUSTER="{{cluster}}"
###################################

export DEBIAN_FRONTEND=noninteractive
export HOME=/root

### Needed for Digital Ocean
#useradd -m -s /bin/bash ${AKDC_ME}
#mkdir -p /home/${AKDC_ME}/.ssh
#cp /root/.ssh/authorized_keys /home/${AKDC_ME}/.ssh
### end DO

cp /usr/share/zoneinfo/America/Chicago /etc/localtime

cd /home/${AKDC_ME} || exit

echo "$(date +'%Y-%m-%d %H:%M:%S')  starting" >> status

echo "${AKDC_ME} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/akdc

touch .sudo_as_admin_successful

# upgrade sshd security
{
  echo ""
  echo "ClientAliveInterval 120"
  echo "Port 2222"
  echo "Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr"
} >> /etc/ssh/sshd_config

# restart sshd
systemctl restart sshd

# make some directories we will need
mkdir -p .ssh
mkdir -p .kube
mkdir -p bin
mkdir -p .local/bin
mkdir -p .k9s
mkdir -p /root/.kube

# configure git CLI
git config --global user.name autogitops
git config --global user.email autogitops@outlook.com
git config --system core.whitespace blank-at-eol,blank-at-eof,space-before-tab
git config --system pull.rebase false
git config --system init.defaultbranch main
git config --system fetch.prune true
git config --system core.pager more

# oh my bash
git clone --depth=1 https://github.com/ohmybash/oh-my-bash.git .oh-my-bash
cp .oh-my-bash/templates/bashrc.osh-template .bashrc

# add to /etc/bash.bashrc
# shellcheck disable=2016
{
  echo ""
  echo "shopt -s expand_aliases"
  echo ""
  echo "alias k='kubectl'"
  echo "alias kga='kubectl get all'"
  echo "alias kgaa='kubectl get all --all-namespaces'"
  echo "alias kaf='kubectl apply -f'"
  echo "alias kdelf='kubectl delete -f'"
  echo "alias kl='kubectl logs'"
  echo "alias kccc='kubectl config current-context'"
  echo "alias kcgc='kubectl config get-contexts'"
  echo "alias kj='kubectl exec -it jumpbox -- bash -l'"
  echo "alias kje='kubectl exec -it jumpbox -- '"
  echo "alias sync='flux reconcile source git gitops && kubectl get pods -A'"
  echo "alias ht='http https://\$AKDC_FQDN/heartbeat/17'"

  echo ""
  echo 'export PATH="$PATH:$HOME/bin"'
  echo "export AKDC_CLUSTER=$AKDC_CLUSTER"
  echo "export AKDC_REPO=$AKDC_REPO"
  echo "export AKDC_FQDN=$AKDC_FQDN"
  echo "export AKDC_DEBUG=$AKDC_DEBUG"

  echo ""
  echo "if [ -f /home/akdc/.oh.my.bash/completion/kic ]; then source /home/akdc/.oh.my.bash/completion/kic; fi"
  echo 'complete -F __start_kubectl k'
  echo 'complete -F __start_kubectl kl'
} >> /etc/bash.bashrc

# source .bashrc for non-interactive logins
sed -i "s/\[ -z \"\$PS1\" ] && return//" /etc/bash.bashrc

chown -R ${AKDC_ME}:${AKDC_ME} /home/${AKDC_ME}

# make some system dirs
mkdir -p /etc/docker
mkdir -p /prometheus && chown -R 65534:65534 /prometheus
mkdir -p /grafana
# cp /workspaces/.cnp-labs/cluster-admin/deploy/grafanadata/grafana.db /grafana
chown -R 472:0 /grafana

# create / add to groups
groupadd docker
usermod -aG sudo ${AKDC_ME}
usermod -aG admin ${AKDC_ME}
usermod -aG docker ${AKDC_ME}
gpasswd -a ${AKDC_ME} sudo

echo "$(date +'%Y-%m-%d %H:%M:%S')  flux retries:" >> status
echo "$(date +'%Y-%m-%d %H:%M:%S')  installing base" >> status
apt-get update
apt-get install -y apt-utils dialog apt-transport-https ca-certificates net-tools

echo "$(date +'%Y-%m-%d %H:%M:%S')  installing libs" >> status
apt-get install -y software-properties-common libssl-dev libffi-dev python-dev build-essential lsb-release gnupg-agent

echo "$(date +'%Y-%m-%d %H:%M:%S')  installing utils" >> status
apt-get install -y curl git wget nano jq zip unzip httpie
apt-get install -y dnsutils coreutils gnupg2 make bash-completion gettext iputils-ping

echo "$(date +'%Y-%m-%d %H:%M:%S')  adding package sources" >> status

# add Docker repo
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key --keyring /etc/apt/trusted.gpg.d/docker.gpg add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

# add kubenetes repo
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list

apt-get update

echo "$(date +'%Y-%m-%d %H:%M:%S')  installing docker" >> status
apt-get install -y docker-ce docker-ce-cli

echo "$(date +'%Y-%m-%d %H:%M:%S')  installing kubectl" >> status
apt-get install -y kubectl

# kubectl auto complete
kubectl completion bash > /etc/bash_completion.d/kubectl

echo "$(date +'%Y-%m-%d %H:%M:%S')  installing k3d" >> status
wget -q -O - https://raw.githubusercontent.com/rancher/k3d/main/install.sh | TAG=v4.4.8 bash

echo "$(date +'%Y-%m-%d %H:%M:%S')  installing flux" >> status
curl -s https://fluxcd.io/install.sh | bash
flux completion bash > /etc/bash_completion.d/flux

#echo "$(date +'%Y-%m-%d %H:%M:%S')  installing istio" >> status
#curl -L https://istio.io/downloadIstio | sh -
#mv istio* istio
#chmod -R 755 istio
#cp istio/tools/istioctl.bash /etc/bash_completion.d
#chown -R ${AKDC_ME}:${AKDC_ME} /home/${AKDC_ME}
#mv istio /usr/local

echo "$(date +'%Y-%m-%d %H:%M:%S')  installing k9s" >> status
VERSION=$(curl -i https://github.com/derailed/k9s/releases/latest | grep "location: https://github.com/" | rev | cut -f 1 -d / | rev | sed 's/\r//')
wget "https://github.com/derailed/k9s/releases/download/${VERSION}/k9s_Linux_x86_64.tar.gz"
tar -zxvf k9s_Linux_x86_64.tar.gz -C /usr/local/bin
rm -f k9s_Linux_x86_64.tar.gz

echo "$(date +'%Y-%m-%d %H:%M:%S')  creating registry" >> status
# create local registry
chown -R ${AKDC_ME}:${AKDC_ME} /home/${AKDC_ME}
docker network create k3d
k3d registry create registry.localhost --port 5500
docker network connect k3d k3d-registry.localhost

# upgrade Ubuntu
echo "$(date +'%Y-%m-%d %H:%M:%S')  upgrading" >> status
apt-get update
apt-get upgrade -y
apt-get autoremove -y

echo "$(date +'%Y-%m-%d %H:%M:%S')  creating k3d cluster" >> status

# change ownership
chown -R ${AKDC_ME}:${AKDC_ME} /home/${AKDC_ME}

# wait for k3d.yaml to be copied
if [ ! -f ./k3d.yaml ]
then
  echo "$(date +'%Y-%m-%d %H:%M:%S')  waiting for k3d.yaml" >> status
  echo "waiting for k3d.yaml"
  sleep 30
fi

# change ownership
chown -R ${AKDC_ME}:${AKDC_ME} /home/${AKDC_ME}

# run setup-k3d.sh
if [ ! -f ./setup-k3d.sh ]
then
  echo "$(date +'%Y-%m-%d %H:%M:%S')  k3d.yaml not found" >> status
  echo "k3d.yaml not found"
  exit 1
fi

./setup-k3d.sh

# copy kube config file
cp /root/.kube/config /home/${AKDC_ME}/.kube/config
chown -R ${AKDC_ME}:${AKDC_ME} /home/${AKDC_ME}

echo "$(date +'%Y-%m-%d %H:%M:%S')  running scripts" >> status

# run akdc-pre.sh
if [ -f ./akdc-pre.sh ]
then
  ./akdc-pre.sh
fi

# setup flux
if [ -f ./flux-setup.sh ]
then
  ./flux-setup.sh
fi

# run akdc-post.sh
if [ -f ./akdc-post.sh ]
then
  ./akdc-post.sh
fi

echo "$(date +'%Y-%m-%d %H:%M:%S')  complete" >> status
echo "complete" >> status
