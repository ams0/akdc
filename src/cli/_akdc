#compdef _akdc akdc

# main function - called via the compdef definition
function _akdc(){
  local line state

  # the first command will parse into "cmds"
  _arguments \
    '--help[Display help and usage]' \
    '--version[Display version info]' \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    # define the top level commands
    cmds)
      _values \
        "commands" \
        "check[check status on each server]" \
        "create[create a new cluster]" \
        "delete[delete an Azure Resource Group]" \
        "exec[execute a command on each server]" \
        "groups[show Azure groups]" \
        "ssh[name ssh into a cluster by server name]" \
        "sync[sync (reconcile) flux on each cluster]" \
        "targets[manage GitOps targets]" \
        "test[run integration or load tests on each cluster]"
    ;;

   # call the sub-command functions
    # the function names use "breadcrumb" naming to avoid collision
    args)
      case $line[1] in
        check)
          _akdc_check
        ;;
        create)
          _akdc_create
        ;;
        delete)
          _akdc_delete
        ;;
        ssh)
          _akdc_ssh
        ;;
        targets)
          _akdc_targets
        ;;
        test)
          _akdc_test
        ;;
      esac
    ;;
  esac
}

function _akdc_test(){
  local line state

  _arguments \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    # define "sub-commands"
    cmds)
      _values \
        'test commands' \
        'integration[run an integration test on each cluster]' \
        'load[run a load test on each cluster]'
    ;;
  esac
}

function _akdc_targets(){
  local line state

  _arguments \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    # define "sub-commands"
    cmds)
      _values \
        'targets commands' \
        'add[add a GitOps target]' \
        'clear[clear all GitOps targets]' \
        'list[list GitOps targets]' \
        'push[push the changes to GitHub]' \
        'remove[remove a GitOps target]'
    ;;
  esac
}

function _akdc_check(){
  local line state

  _arguments \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    # define "sub-commands"
    cmds)
      _values \
        'Check commands' \
        'dapr[check dapr status on each server]' \
        'flux[check flux status on each server]' \
        'ngsa[check ngsa status on each server]' \
        'radius[check radius status on each server]' \
        'retries[check flux retries on each server]' \
        'setup[check setup status on each server]' \
        'ssl[curl tinybench via https on each server]'
    ;;
  esac
}

function _akdc_create(){
  local line state
  _arguments \
    "--cluster+[Kubernetes cluster name (root)]" \
    '--group+[Azure resource group name]' \
    '--key+[Path to SSL .key file (default "~/.ssh/certs.key")]' \
    '--location+[Azure location (default "centralus")]' \
    '--pem+[Path to SSL .pem file (default "~/.ssh/certs.pem")]' \
    '--quiet[Quiet mode]' \
    '--repo+[GitOps repo name (default "retaildevcrews/edge-gitops")]' \
    '--ssl[Use SSL cert (must specify --zone)]' \
    '--zone+[DNS domain name]' \
    '1: :->cmds' \
    '*: :->args'

  case $state in
    # define arguments
    args)
      _arguments \
        '--cluster+[Kubernetes cluster name (args)]' \
        '--group+[Azure resource group name]' \
        '--key+[Path to SSL .key file (default "~/.ssh/certs.key")]' \
        '--location+[Azure location (default "centralus")]' \
        '--pem+[Path to SSL .pem file (default "~/.ssh/certs.pem")]' \
        '--quiet[Quiet mode]' \
        '--repo+[GitOps repo name (default "retaildevcrews/edge-gitops")]' \
        '--ssl[Use SSL cert (must specify --zone)]' \
        '--zone+[DNS domain name]' \
        '1: :->cmds' \
        '*: :->args'
    ;;
  esac
}

function _akdc_delete(){
  local line state

  _arguments \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    # define "sub-commands"
    cmds)
      _arguments \
        '1:Select a server:($(cat ips | sort | cut -f1))'
    ;;
  esac
}

function _akdc_ssh(){
  local line state

  _arguments \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    # define "sub-commands"
    cmds)
      _arguments \
        '1:Select a server:($(cat ips | sort | cut -f1))'
    ;;
  esac
}
