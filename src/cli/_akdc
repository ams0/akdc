#compdef _akdc akdc

# main function - called via the compdef definition
function _akdc(){
  local line state

  # the first command will parse into "cmds"
  _arguments \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    # define the top level commands
    cmds)
      _values \
        "commands" \
        "check[check status on each server]" \
        "delete[delete an Azure Resource Group]" \
        "exec[execute a command on each server]" \
        "flux[flux commands]" \
        "groups[show Azure groups]" \
        "ssh[name ssh into a cluster by server name]"
    ;;

   # call the sub-command functions
    # the function names use "breadcrumb" naming to avoid collision
    args)
      case $line[1] in
        check)
          _akdc_check
        ;;
        delete)
          _akdc_delete
        ;;
        flux)
          _akdc_flux
        ;;
        ssh)
          _akdc_ssh
        ;;
      esac
    ;;
  esac
}

function _akdc_check(){
  local line state

  _arguments \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    # define "sub-commands"
    cmds)
      _values \
        'Check commands' \
        'dapr[check dapr status on each server]' \
        'flux[check flux status on each server]' \
        'ngsa[check ngsa status on each server]' \
        'radius[check radius status on each server]' \
        'retries[check flux retries on each server]' \
        'setup[check setup status on each server]' \
        'ssl[curl tinybench via https on each server]'
    ;;
  esac
}

function _akdc_flux(){
  local line state

  _arguments \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    # define "sub-commands"
    cmds)
      _values \
        'Flux commands' \
        'reconcile[run flux reconcile on each server]' \
        'setup[setup flux on each server if needed]'
    ;;
  esac
}

function _akdc_delete(){
  local line state

  _arguments \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    # define "sub-commands"
    cmds)
      _arguments \
        '1:Select a server:($(cat ips | sort | cut -f1))'
    ;;
  esac
}

function _akdc_ssh(){
  local line state

  _arguments \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    # define "sub-commands"
    cmds)
      _arguments \
        '1:Select a server:($(cat ips | sort | cut -f1))'
    ;;
  esac
}
